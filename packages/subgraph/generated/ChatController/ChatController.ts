// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ContentAdded extends ethereum.Event {
  get params(): ContentAdded__Params {
    return new ContentAdded__Params(this);
  }
}

export class ContentAdded__Params {
  _event: ContentAdded;

  constructor(event: ContentAdded) {
    this._event = event;
  }

  get contentId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get contentUri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class MessageCreated extends ethereum.Event {
  get params(): MessageCreated__Params {
    return new MessageCreated__Params(this);
  }
}

export class MessageCreated__Params {
  _event: MessageCreated;

  constructor(event: MessageCreated) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get messageOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get parentId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get contentId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get sessionId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class SessionCreated extends ethereum.Event {
  get params(): SessionCreated__Params {
    return new SessionCreated__Params(this);
  }
}

export class SessionCreated__Params {
  _event: SessionCreated;

  constructor(event: SessionCreated) {
    this._event = event;
  }

  get sessionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class createdController extends ethereum.Event {
  get params(): createdController__Params {
    return new createdController__Params(this);
  }
}

export class createdController__Params {
  _event: createdController;

  constructor(event: createdController) {
    this._event = event;
  }

  get controllerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ChatController__getMessageResult {
  value0: Address;
  value1: Bytes;
  value2: Bytes;
  value3: Bytes;

  constructor(value0: Address, value1: Bytes, value2: Bytes, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    return map;
  }
}

export class ChatController__verifyResult {
  value0: string;
  value1: Address;

  constructor(value0: string, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class ChatController extends ethereum.SmartContract {
  static bind(address: Address): ChatController {
    return new ChatController("ChatController", address);
  }

  addSession(): Bytes {
    let result = super.call("addSession", "addSession():(bytes32)", []);

    return result[0].toBytes();
  }

  try_addSession(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("addSession", "addSession():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controllerCount(): BigInt {
    let result = super.call(
      "controllerCount",
      "controllerCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_controllerCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "controllerCount",
      "controllerCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createController(_tokenURI: string): BigInt {
    let result = super.call(
      "createController",
      "createController(string):(uint256)",
      [ethereum.Value.fromString(_tokenURI)]
    );

    return result[0].toBigInt();
  }

  try_createController(_tokenURI: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createController",
      "createController(string):(uint256)",
      [ethereum.Value.fromString(_tokenURI)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createMessage(
    _parentId: Bytes,
    _contentUri: string,
    _sessionId: Bytes
  ): Bytes {
    let result = super.call(
      "createMessage",
      "createMessage(bytes32,string,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_parentId),
        ethereum.Value.fromString(_contentUri),
        ethereum.Value.fromFixedBytes(_sessionId)
      ]
    );

    return result[0].toBytes();
  }

  try_createMessage(
    _parentId: Bytes,
    _contentUri: string,
    _sessionId: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createMessage",
      "createMessage(bytes32,string,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_parentId),
        ethereum.Value.fromString(_contentUri),
        ethereum.Value.fromFixedBytes(_sessionId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContent(_contentId: Bytes): string {
    let result = super.call("getContent", "getContent(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(_contentId)
    ]);

    return result[0].toString();
  }

  try_getContent(_contentId: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("getContent", "getContent(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(_contentId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getMessage(_messageId: Bytes): ChatController__getMessageResult {
    let result = super.call(
      "getMessage",
      "getMessage(bytes32):(address,bytes32,bytes32,bytes32)",
      [ethereum.Value.fromFixedBytes(_messageId)]
    );

    return new ChatController__getMessageResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toBytes(),
      result[3].toBytes()
    );
  }

  try_getMessage(
    _messageId: Bytes
  ): ethereum.CallResult<ChatController__getMessageResult> {
    let result = super.tryCall(
      "getMessage",
      "getMessage(bytes32):(address,bytes32,bytes32,bytes32)",
      [ethereum.Value.fromFixedBytes(_messageId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChatController__getMessageResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toBytes(),
        value[3].toBytes()
      )
    );
  }

  getSession(_sessionId: Bytes): Address {
    let result = super.call("getSession", "getSession(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_sessionId)
    ]);

    return result[0].toAddress();
  }

  try_getSession(_sessionId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("getSession", "getSession(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_sessionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  verify(_messageId: Bytes): ChatController__verifyResult {
    let result = super.call("verify", "verify(bytes32):(string,address)", [
      ethereum.Value.fromFixedBytes(_messageId)
    ]);

    return new ChatController__verifyResult(
      result[0].toString(),
      result[1].toAddress()
    );
  }

  try_verify(
    _messageId: Bytes
  ): ethereum.CallResult<ChatController__verifyResult> {
    let result = super.tryCall("verify", "verify(bytes32):(string,address)", [
      ethereum.Value.fromFixedBytes(_messageId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChatController__verifyResult(
        value[0].toString(),
        value[1].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _VRFCoordinator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _LinkToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _keyhash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _fee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddSessionCall extends ethereum.Call {
  get inputs(): AddSessionCall__Inputs {
    return new AddSessionCall__Inputs(this);
  }

  get outputs(): AddSessionCall__Outputs {
    return new AddSessionCall__Outputs(this);
  }
}

export class AddSessionCall__Inputs {
  _call: AddSessionCall;

  constructor(call: AddSessionCall) {
    this._call = call;
  }
}

export class AddSessionCall__Outputs {
  _call: AddSessionCall;

  constructor(call: AddSessionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CreateControllerCall extends ethereum.Call {
  get inputs(): CreateControllerCall__Inputs {
    return new CreateControllerCall__Inputs(this);
  }

  get outputs(): CreateControllerCall__Outputs {
    return new CreateControllerCall__Outputs(this);
  }
}

export class CreateControllerCall__Inputs {
  _call: CreateControllerCall;

  constructor(call: CreateControllerCall) {
    this._call = call;
  }

  get _tokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateControllerCall__Outputs {
  _call: CreateControllerCall;

  constructor(call: CreateControllerCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateMessageCall extends ethereum.Call {
  get inputs(): CreateMessageCall__Inputs {
    return new CreateMessageCall__Inputs(this);
  }

  get outputs(): CreateMessageCall__Outputs {
    return new CreateMessageCall__Outputs(this);
  }
}

export class CreateMessageCall__Inputs {
  _call: CreateMessageCall;

  constructor(call: CreateMessageCall) {
    this._call = call;
  }

  get _parentId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _contentUri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _sessionId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CreateMessageCall__Outputs {
  _call: CreateMessageCall;

  constructor(call: CreateMessageCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RawFulfillRandomnessCall extends ethereum.Call {
  get inputs(): RawFulfillRandomnessCall__Inputs {
    return new RawFulfillRandomnessCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomnessCall__Outputs {
    return new RawFulfillRandomnessCall__Outputs(this);
  }
}

export class RawFulfillRandomnessCall__Inputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get randomness(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RawFulfillRandomnessCall__Outputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this);
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this);
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
